// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["postgresql"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Job {
  @@map("jobs")
  id  Int @id @default(autoincrement())
  name String
  logo String
  style Int
  special Boolean
  disclaimer String?
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
}

model Skill {
  @@map("skills")
  id  Int @id @default(autoincrement())
  name String
  type String
  logo String
  percentage Int
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
}

model App {
  @@map("apps")
  id  Int @id @default(autoincrement())
  name String
  description String?
  image String
  url String?
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
}

model Bookmark {
  @@map("bookmarks")
  id  Int @id @default(autoincrement())
  name String
  description String?
  url String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int @map("category_id")
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
}

model Category {
  @@map("categories")
  id  Int @id @default(autoincrement())
  name String
  type String
  bookmarks Bookmark[]
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
}

model UserAccess {
  @@map("user_access")
  id  Int @id @default(autoincrement())
  email        String   
  role         String
}

model Account {
  @@map("accounts")
  id                 String @id @default(cuid())
  userId             String @map("user_id")
  type               String
  provider           String
  providerAccountId  String @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  @@map("sessions")
  id  Int @id @default(autoincrement())
  sessionToken String @unique @map("session_token")
  userId       String @map("user_id")
  expires      DateTime
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  @@map("users")
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  @@map("verification_tokens")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}