generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Skill {
  id         Int       @id @default(autoincrement())
  name       String
  type       String
  logo       String
  percentage Int
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  @@map("skills")
}

model App {
  id          Int       @id @default(autoincrement())
  name        String
  fileId      Int?      @map("file_id")
  file        File?     @relation(fields: [fileId], references: [id])
  url         String?
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  description String?

  @@map("apps")
}

model Bookmark {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  url         String
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  categoryId  Int       @map("category_id")
  category    Category  @relation(fields: [categoryId], references: [id])

  @@index([categoryId], map: "bookmarks_category_id_fkey")
  @@map("bookmarks")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  type      String
  createdAt DateTime?  @default(now()) @map("created_at")
  updatedAt DateTime?  @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  bookmarks Bookmark[]

  @@map("categories")
}

model MenuLink {
  id         Int       @id @default(autoincrement())
  name       String?
  url        String?
  onlyMobile Boolean   @default(false)
  active     Boolean   @default(true)
  order      Int       @default(0)
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  @@map("menu_links")
}

model Resume {
  id          Int             @id @default(autoincrement())
  name        String
  company     String?
  location    String?
  fileId      Int?            @map("file_id")
  file        File?           @relation(fields: [fileId], references: [id])
  description String?         @db.Text
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime?       @default(now()) @map("created_at")
  updatedAt   DateTime?       @map("updated_at")
  projects    ResumeProject[]
  tags        ResumeTag[]

  @@map("resume")
}

model ResumeTag {
  id   Int      @id @default(autoincrement())
  name String   @unique // change
  jobs Resume[]

  @@map("resume_tags")
}

model ResumeProject {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  fileId      Int?      @map("file_id")
  file        File?     @relation(fields: [fileId], references: [id])
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  resumeId    Int       @map("resume_id")
  resume      Resume    @relation(fields: [resumeId], references: [id])

  @@index([resumeId], map: "resume_projects_resume_id_fkey")
  @@map("resume_projects")
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  author      String?
  fileId      Int?             @map("file_id")
  file        File?           @relation(fields: [fileId], references: [id])
  isbn        String  @unique
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  @@map("books")
}

model File {
  id          Int       @id @default(autoincrement())
  name        String
  type        String
  path        String  @unique
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  books      Book[]
  resumes    Resume[]
  resumeProjects ResumeProject[]
  apps       App[]
  
  @@map("files")
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  role          String?
  sessions      Session[]

  @@map("users")
}