generator client {
  provider = "prisma-client-js"
  output   = "../out/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Skill {
  id         Int       @id @default(autoincrement())
  name       String
  type       String
  logo       String
  percentage Int
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?
}

model App {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  fileId      Int?      
  file        File?     @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url         String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
}

model Bookmark {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  url         String
  categoryId  Int      
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? 

  @@index([categoryId], map: "bookmarks_category_id")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  type      String
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  
  deletedAt DateTime?
  bookmarks Bookmark[]
}

model MenuLink {
  id         Int       @id @default(autoincrement())
  name       String?
  url        String?
  onlyMobile Boolean   @default(false)
  active     Boolean   @default(true)
  order      Int       @default(0)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? 
}

model Resume {
  id          Int             @id @default(autoincrement())
  name        String
  description String?         @db.Text
  company     String?
  location    String?
  fileId      Int?            
  file        File?           @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  featured    Boolean   @default(false)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime?       @default(now())
  updatedAt   DateTime?       
  projects    ResumeProject[]
  tags        ResumeTag[]
}

model ResumeTag {
  id   Int      @id @default(autoincrement())
  name String   @unique // change
  jobs Resume[]
}

model ResumeProject {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  resumeId    Int       
  resume      Resume    @relation(fields: [resumeId], references: [id])
  fileId      Int?      
  file        File?     @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  featured    Boolean   @default(false)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? 

  @@index([resumeId], map: "project_resume_id")
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  author      String?
  fileId      Int?             
  file        File?           @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isbn        String  @unique
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? 
  tags        BookTag[]
}

model BookTag {
  id   Int      @id @default(autoincrement())
  name String   @unique // change
  published Boolean @default(false)
  books Book[]
}

model File {
  id          Int       @id @default(autoincrement())
  name        String
  type        String
  path        String  @unique
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? 

  books      Book[]
  resumes    Resume[]
  resumeProjects ResumeProject[]
  apps       App[]
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

 
model Account {
  id                       String  @id @default(cuid())
  userId                   Int  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id        String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}