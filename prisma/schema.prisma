generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Skill {
  id         Int       @id @default(autoincrement())
  name       String
  type       String
  logo       String
  percentage Int
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@map("skills")
}

model App {
  id          Int       @id @default(autoincrement())
  name        String
  image       String
  url         String?
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  description String?

  @@map("apps")
}

model Bookmark {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  url         String
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  categoryId  Int       @map("category_id")
  category    Category  @relation(fields: [categoryId], references: [id])

  @@index([categoryId], map: "bookmarks_category_id_fkey")
  @@map("bookmarks")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  type      String
  createdAt DateTime?  @default(now()) @map("created_at")
  updatedAt DateTime?  @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  bookmarks Bookmark[]

  @@map("categories")
}

model MenuLink {
  id            Int    @id @default(autoincrement())
  name          String?
  url           String?
  onlyMobile    Boolean @default(false)
  active        Boolean @default(true)
  order         Int @default(0)
  createdAt     DateTime? @default(now()) @map("created_at")
  updatedAt     DateTime? @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  @@map("menu_links")
}

model Resume {
  id          Int       @id @default(autoincrement())
  name        String
  company     String? 
  location    String?
  logo        String?
  description String?   @db.Text
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  projects       ResumeProject[]
  tags        ResumeTag[]

  @@map("resume")
}

model ResumeTag {
  id          Int       @id @default(autoincrement())
  name        String    @unique  // change
  jobs        Resume[]

  @@map("resume_tags")
}

model ResumeProject {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  logo        String
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  resumeId    Int       @map("resume_id")
  resume      Resume  @relation(fields: [resumeId], references: [id])

  @@index([resumeId], map: "resume_projects_resume_id_fkey")

  @@map("resume_projects")
}

model UserAccess {
  id    Int    @id @default(autoincrement())
  email String
  role  String

  @@map("user_access")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}